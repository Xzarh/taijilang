taiji language 0.1

  some macros for small code piece to check type
  by use macros, we can reduce function call and optimize the performance of the program

  macro definition will not generate code in the object code, but macro call will.

undefined? #= (obj) -> `((^obj)==undefined)
null? #= (obj) -> `((^obj)==null or (^obj)==undefined)
true? #= (obj) -> ` !!(^obj)
false? #= (obj) -> ` !(^obj)
boolean? #= (obj) -> ` (typeof (^obj) == "boolean")
number? #= (obj) -> `(Object::toString.call(^obj) == '[object Number]')
string? #= (obj) -> ` (Object::toString.call(^obj) == '[object String]')
array? #= (obj) -> ` (Object::toString.call(^obj) == '[object Array]')
object? #= (obj) -> ` (Object::toString.call(^obj) == '[object Object]')
function? #= (obj) -> ` (Object::toString.call(^obj) == '[object Function]')

isArray #= (obj) ->  (Object::toString.call(obj) == '[object Array]')

/. require! usage:
  require! 'module'
  require! m1 = 'module1'
  require! {x, y} = m2 = 'module'
  require! 'abc' 'def'

/.require! #= (args...) ->
  result = ['begin!']
  for arg in args then
    if string? # arg then
      baseName = baseName(arg)
      result.push `{\= ^baseName {require ^arg}}
    else if array? # arg then
      if
  result