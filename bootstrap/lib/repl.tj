taiji language 0.1

    this file is based on coffeescript/src/repl.coffee(https://github.com/jashkenas/coffeescript)
    Thanks to  Jeremy Ashkenas

    Some stuffs is added or modified for taiji langauge.
    Copyright (c) 2009-2014 Jeremy Ashkenas
    Copyright (c) 2014-2015 Caoxingming

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

fs = require 'fs'
path = require 'path'
vm = require 'vm'
nodeREPL = require 'repl'
{Environment compileExp textizerOptions} = taiji = require './taiji'
{extend merge updateSyntaxError} = require './utils'

options = extend {}, textizerOptions
parser = new taiji.Parser
env = new Environment extend({}, taiji.builtins), null, {}

extern! global Buffer parseInt

replDefaults = {.
  prompt: 'taiji: '
  historyFile: if process.env.HOME then path.join process.env.HOME, '.taiji_history'
  historyMaxInputSize: 10240
  eval: (input, context, filename, cb) ->
    var err
    input = input.replace /!\uFF00/g, '\n'  // XXX: multiline hack.
    input = input.replace /!^\(([\s\S]*)\n\)$/m, '$1' // Node's REPL sends the input ending with a newline and then wrapped in parens. Unwrap all that.
    try
      exp = parser.parse(input, parser.moduleBody, 0, 0, 0, env)
      js = compileExp(exp, env, options)
      result = if context==global then vm.runInThisContext js, filename
      else vm.runInContext js, context, filename
      cb null, result
    catch err then
      updateSyntaxError err, input
      cb err
.}

addMultilineHandler = (repl) ->
  {rli inputStream outputStream} = repl

  multiline = {.
    enabled: false
    initialPrompt: repl.prompt.replace(/!^[^> ]*/, {(x) -> x.replace(/!./g, '-')})
    prompt: repl.prompt.replace(/!^[^> ]*>?/, {(x) -> x.replace /!./g, '.'})
    buffer: ''
    .}

  // Proxy node's line listener
  nodeLineListener = rli.listeners('line')[0]
  rli.removeListener 'line', nodeLineListener
  rli.on 'line', (cmd) ->
    if multiline.enabled then
      multiline.buffer += "{cmd}\n"
      rli.setPrompt multiline.prompt
      rli.prompt true
    else nodeLineListener cmd
    return

  // Handle Ctrl-v
  inputStream.on 'keypress', (char, key) ->
    if !(key and key.ctrl and !key.meta and !key.shift and key.name=='v') then return
    if multiline.enabled then
      // allow arbitrarily switching between modes any time before multiple lines are entered
      if !multiline.buffer.match(/!\n/) then
        multiline.enabled = !multiline.enabled
        rli.setPrompt repl.prompt
        rli.prompt true
        return
      // no-op unless the current line is empty
      if rli.line? and !rli.line.match(/!^\s*$/) then return
      // eval, print, loop
      multiline.enabled = !multiline.enabled
      rli.line = ''
      rli.cursor = 0
      rli.output.cursorTo 0
      rli.output.clearLine 1
      // XXX: multiline hack
      multiline.buffer = multiline.buffer.replace /!\n/g, '\uFF00'
      rli.emit 'line', multiline.buffer
      multiline.buffer = ''
    else
      multiline.enabled = not multiline.enabled
      rli.setPrompt multiline.initialPrompt
      rli.prompt true
    return

// Store and load command history from a file
addHistory = (repl, filename, maxSize) ->
  var lastLine = null
  try
    // Get file info and at most maxSize of command history
    stat = fs.statSync filename
    size = Math.min maxSize, stat.size
    // Read last `size` bytes from the file
    readFd = fs.openSync filename, 'r'
    buffer = new Buffer(size)
    fs.readSync readFd, buffer, 0, size, stat.size - size
    // Set the history on the interpreter
    repl.rli.history = buffer.toString().split('\n').reverse()
    // If the history file was truncated we should pop off a potential partial line
    if stat.size > maxSize then repl.rli.history.pop()
    // Shift off the final blank newline
    if repl.rli.history[0]=='' then repl.rli.history.shift()
    repl.rli.historyIndex = -1
    lastLine = repl.rli.history[0]

  fd = fs.openSync filename, 'a'

  repl.rli.addListener 'line', (code) ->
    if code and code.length and code!='.history' and lastLine!=code:
      // Save the latest command in the file
      fs.write fd, "{code}\n"
      lastLine = code

  repl.rli.on 'exit', -> fs.close fd

  // Add a command to show the history stack
  repl.commands['.history'] = {.
    help: 'Show command history'
    action: ->
      repl.outputStream.write "{repl.rli.history[..].reverse().join '\n'}\n"
      repl.displayPrompt()
  .}

module.exports = {.
  start: (opts = {}) ->
    [major, minor, build] = process.versions.node.split('.').map (n) -> parseInt(n)

    if major==0 and minor < 8 then
      console.warn "Node 0.8.0+ required for taiji REPL"
      process.exit 1

    taiji.register()
    process.argv = ['taiji'].concat process.argv[2..]
    opts = merge replDefaults, opts
    repl = nodeREPL.start opts
    repl.on 'exit', -> repl.outputStream.write '\n'
    addMultilineHandler repl
    if opts.historyFile then addHistory repl, opts.historyFile, opts.historyMaxInputSize
    // Correct the description inherited from the node REPL
    repl.commands['.load'].help = 'Load code from a file into this REPL session'
    repl
.}